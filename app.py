import streamlit as st
from supabase import create_client
from datetime import datetime

# === CONFIG ===
SUPABASE_URL = st.secrets["supabase_url"]
SUPABASE_KEY = st.secrets["supabase_key"]
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

st.set_page_config("üíß ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥", layout="centered")
st.title("üíß ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏°‡∏ö‡πâ‡∏≤‡∏ô")

# === ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ===
with st.expander("üõ† ‡∏Å‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö)"):
    if st.button("üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"):
        demo_data = [
            {"address": "‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 101", "previous_meter": 0},
            {"address": "‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 102", "previous_meter": 45},
            {"address": "‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 103", "previous_meter": 88},
        ]
        result = supabase.table("houses").insert(demo_data).execute()
        st.success("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ reload ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö")

# === ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡πâ‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Supabase ===
@st.cache_data
def load_houses():
    res = supabase.table("houses").select("*").execute()
    return res.data

houses = load_houses()

if not houses:
    st.warning("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏ô Supabase")
    st.stop()

# === ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡πâ‡∏≤‡∏ô ===
address_list = [h.get("address", "").strip() for h in houses]
selected_address = st.selectbox("üè† ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô", address_list)

# === ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ===
selected_house = next((h for h in houses if h.get("address", "").strip() == selected_address), None)

if selected_house:
    previous_meter = selected_house.get("previous_meter", 0)
    st.info(f"üîÅ ‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {previous_meter}")
else:
    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
    st.stop()

# === ‡∏Å‡∏£‡∏≠‡∏Å‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ===
current_meter = st.number_input("üì• ‡∏Ñ‡πà‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", min_value=previous_meter, step=1.0)

# === ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ===
if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥"):
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    units_used = current_meter - previous_meter
    price = calculate_price(units_used)

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á water_usage
    supabase.table("water_usage").insert({
        "address": selected_address,
        "previous_meter": previous_meter,
        "current_meter": current_meter,
        "units_used": units_used,
        "price": price,
        "created_at": datetime.utcnow().isoformat()
    }).execute()

    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï previous_meter ‡πÉ‡∏ô houses
    supabase.table("houses").update({
        "previous_meter": current_meter
    }).eq("id", selected_house["id"]).execute()

    st.success(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ {units_used} ‡∏´‡∏ô‡πà‡∏ß‡∏¢ = {price:.2f} ‡∏ö‡∏≤‡∏ó üíß")

# === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥ ===
def calculate_price(units):
    return units * 10  # ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏•‡∏∞ 10 ‡∏ö‡∏≤‡∏ó (‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á)

