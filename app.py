import streamlit as st
from supabase import create_client
from datetime import datetime

# === CONFIG ===
SUPABASE_URL = st.secrets["supabase_url"]
SUPABASE_KEY = st.secrets["supabase_key"]
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

st.set_page_config("üíß ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥", layout="centered")
st.title("üíß‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥")

# === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥ ===
def calculate_price(units):
    return units * 10  # ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

# === ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡πâ‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Supabase ===
@st.cache_data(ttl=60)
def load_houses():
    res = supabase.table("houses").select("*").execute()
    return res.data

houses = load_houses()
if not houses:
    st.warning("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏ô Supabase")
    st.stop()

# === ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡πâ‡∏≤‡∏ô ===
if "show_add_form" not in st.session_state:
    st.session_state.show_add_form = False

# === ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡πâ‡∏≤‡∏ô ===
# -- ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å Supabase
address_list = [h["address"] for h in houses if "address" in h]

# -- ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ + ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô
st.markdown("### üè† ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
search_col1, search_col2 ,col2 = st.columns([3, 1, 1])

with search_col1:
    search_input = st.text_input("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡πâ‡∏≤‡∏ô", placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡πâ‡∏≤‡∏ô")

# -- ‡∏Å‡∏£‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
matches = [addr for addr in address_list if search_input.lower() in addr.lower()] if search_input else address_list

with search_col2:
    if matches:
        selected_address = st.selectbox(" ", matches, label_visibility="collapsed")
    else:
        selected_address = None
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")

# -- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
if selected_address:
    selected_house = next(
        (h for h in houses if h.get("address", "").strip() == selected_address.strip()),
        None
    )
else:
    selected_house = None  

with col2:
   
    if st.button("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà +"):
        st.session_state.show_add_form = not st.session_state.show_add_form
        
    st.markdown('</div>', unsafe_allow_html=True)
        
    # === ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà ===
    if st.session_state.show_add_form:
        with st.form("add_house_form", clear_on_submit=True):
            new_address = st.text_input("üè° ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡πâ‡∏≤‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 999)")
            new_previous_meter = st.number_input("üìü ‡∏Ñ‡πà‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", min_value=0.0, step=0.1, format="%.2f")
            submitted = st.form_submit_button("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà")
        
            if submitted:
                clean_address = new_address.strip()
                existing_addresses = [addr.strip() for addr in address_list]
        
                if clean_address == "":
                    st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                elif clean_address in existing_addresses:
                    st.warning("‚ö†Ô∏è ‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
                else:
                    data_to_insert = {
                        "address": clean_address,
                        "previous_meter": float(new_previous_meter)
                    }
                    try:
                        result = supabase.table("houses").insert(data_to_insert).execute()
        
                        if result.data:
                            st.success("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                            st.session_state.show_add_form = False
                            st.rerun()
                        else:
                            st.error(f"‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {result.error}")
                    except Exception as e:
                        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞ insert: {e}")


# === ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ===
selected_house = next((h for h in houses if h.get("address", "").strip() == selected_address.strip()), None)
if selected_house:
    previous_meter = selected_house.get("previous_meter", 0)
else:
    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
    st.stop()

# === ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ===
current_meter = st.number_input(
    "üì• ‡∏Ñ‡πà‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
    min_value=float(previous_meter),
    step=0.1,
    format="%.2f"
)

# === ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î + ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) ===
st.markdown(
    f"""
    <div style='background-color:#e6f4ff; padding:10px 15px; border-radius:10px; border:1px solid #cce0ff; font-size:16px;'>
        üîÅ ‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: <b>{previous_meter}</b> &nbsp;&nbsp;|&nbsp;&nbsp; üì• ‡∏Ñ‡πà‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: <b>{current_meter}</b>
    </div>
    """,
    unsafe_allow_html=True
)

# === ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
if current_meter > previous_meter:
    units_used = current_meter - previous_meter
    price = calculate_price(units_used)
    col1, col2 = st.columns(2)
    col1.metric("üíß ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ", f"{units_used:.2f} ‡∏´‡∏ô‡πà‡∏ß‡∏¢")
    col2.metric("üí∏ ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥", f"{price:.2f} ‡∏ö‡∏≤‡∏ó")
elif current_meter == previous_meter:
    st.info("üìå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
else:
    st.warning("‚ùå ‡∏Ñ‡πà‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤")


# === ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
col1, col2, col3 = st.columns([2, 3, 2])  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
with col1:
    
with col2:
    if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥") and current_meter > previous_meter:
        insert_result = supabase.table("water_usage").insert({
            "address": selected_address,
            "previous_meter": previous_meter,
            "current_meter": current_meter,
            "units_used": units_used,
            "price": price,
            "created_at": datetime.utcnow().isoformat()
        }).execute()

        update_result = supabase.table("houses").update({
            "previous_meter": current_meter
        }).eq("id", selected_house["id"]).execute()

        st.success(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ {units_used:.2f} ‡∏´‡∏ô‡πà‡∏ß‡∏¢ = {price:.2f} ‡∏ö‡∏≤‡∏ó üíß")
with col3:
